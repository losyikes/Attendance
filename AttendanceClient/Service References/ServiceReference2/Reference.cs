//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AttendanceClient.ServiceReference2 {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference2.IAttendanceTools")]
    public interface IAttendanceTools {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAttendanceTools/LoginUser", ReplyAction="http://tempuri.org/IAttendanceTools/LoginUserResponse")]
        string LoginUser(string mac, System.Net.IPAddress ip);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAttendanceTools/LoginUser", ReplyAction="http://tempuri.org/IAttendanceTools/LoginUserResponse")]
        System.Threading.Tasks.Task<string> LoginUserAsync(string mac, System.Net.IPAddress ip);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAttendanceTools/IsAttendanceSet", ReplyAction="http://tempuri.org/IAttendanceTools/IsAttendanceSetResponse")]
        bool IsAttendanceSet(string mac);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAttendanceTools/IsAttendanceSet", ReplyAction="http://tempuri.org/IAttendanceTools/IsAttendanceSetResponse")]
        System.Threading.Tasks.Task<bool> IsAttendanceSetAsync(string mac);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAttendanceTools/CheckAdminAccess", ReplyAction="http://tempuri.org/IAttendanceTools/CheckAdminAccessResponse")]
        bool CheckAdminAccess();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAttendanceTools/CheckAdminAccess", ReplyAction="http://tempuri.org/IAttendanceTools/CheckAdminAccessResponse")]
        System.Threading.Tasks.Task<bool> CheckAdminAccessAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAttendanceTools/ShowAttendanceList", ReplyAction="http://tempuri.org/IAttendanceTools/ShowAttendanceListResponse")]
        string ShowAttendanceList();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAttendanceTools/ShowAttendanceList", ReplyAction="http://tempuri.org/IAttendanceTools/ShowAttendanceListResponse")]
        System.Threading.Tasks.Task<string> ShowAttendanceListAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IAttendanceToolsChannel : AttendanceClient.ServiceReference2.IAttendanceTools, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AttendanceToolsClient : System.ServiceModel.ClientBase<AttendanceClient.ServiceReference2.IAttendanceTools>, AttendanceClient.ServiceReference2.IAttendanceTools {
        
        public AttendanceToolsClient() {
        }
        
        public AttendanceToolsClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public AttendanceToolsClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AttendanceToolsClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AttendanceToolsClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string LoginUser(string mac, System.Net.IPAddress ip) {
            return base.Channel.LoginUser(mac, ip);
        }
        
        public System.Threading.Tasks.Task<string> LoginUserAsync(string mac, System.Net.IPAddress ip) {
            return base.Channel.LoginUserAsync(mac, ip);
        }
        
        public bool IsAttendanceSet(string mac) {
            return base.Channel.IsAttendanceSet(mac);
        }
        
        public System.Threading.Tasks.Task<bool> IsAttendanceSetAsync(string mac) {
            return base.Channel.IsAttendanceSetAsync(mac);
        }
        
        public bool CheckAdminAccess() {
            return base.Channel.CheckAdminAccess();
        }
        
        public System.Threading.Tasks.Task<bool> CheckAdminAccessAsync() {
            return base.Channel.CheckAdminAccessAsync();
        }
        
        public string ShowAttendanceList() {
            return base.Channel.ShowAttendanceList();
        }
        
        public System.Threading.Tasks.Task<string> ShowAttendanceListAsync() {
            return base.Channel.ShowAttendanceListAsync();
        }
    }
}
